// Responsive breakpoints
@mixin respond-to($breakpoint) {
  @if $breakpoint == sm {
    @media (min-width: $breakpoint-sm) { @content; }
  } @else if $breakpoint == md {
    @media (min-width: $breakpoint-md) { @content; }
  } @else if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) { @content; }
  } @else if $breakpoint == xl {
    @media (min-width: $breakpoint-xl) { @content; }
  }
}

// Flexbox
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// Grid
@mixin grid($columns: 1, $gap: $spacing-md) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// Absolute positioning
@mixin absolute($top: auto, $right: auto, $bottom: auto, $left: auto) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

// Center element (absolute positioning)
@mixin center-absolute {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Center element (flexbox)
@mixin center-flex {
  display: flex;
  justify-content: center;
  align-items: center;
}

// Text truncation
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Hide text (visually)
@mixin hide-text {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

// Box shadow
@mixin box-shadow($shadow: $shadow-md) {
  box-shadow: $shadow;
}

// Transition
@mixin transition($property: all, $duration: 0.3s, $timing: ease) {
  transition: $property $duration $timing;
}

// Hover effect
@mixin hover {
  &:hover, &:focus {
    @content;
  }
}

// Button styles
@mixin button($bg-color: $primary-color, $text-color: white, $hover-bg: darken($primary-color, 10%)) {
  display: inline-block;
  padding: $spacing-sm $spacing-lg;
  background-color: $bg-color;
  color: $text-color;
  border: none;
  border-radius: $radius-sm;
  font-family: $font-secondary;
  font-weight: $font-weight-medium;
  text-align: center;
  cursor: pointer;
  transition: $transition-base;
  
  &:hover, &:focus {
    background-color: $hover-bg;
  }
}

// Overlay
@mixin overlay($color: rgba(0, 0, 0, 0.5), $z-index: 1) {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: $color;
  z-index: $z-index;
}

// Clearfix
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// Responsive font size
@mixin responsive-font-size($min-size, $max-size, $min-width: $breakpoint-sm, $max-width: $breakpoint-xl) {
  font-size: $min-size;
  
  @media (min-width: $min-width) {
    font-size: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-width}) / #{strip-unit($max-width - $min-width)}));
  }
  
  @media (min-width: $max-width) {
    font-size: $max-size;
  }
} 